/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/[...all]': RouteRecordInfo<'/[...all]', '/:all(.*)', { all: ParamValue<true> }, { all: ParamValue<false> }>,
    '/@/profile': RouteRecordInfo<'/@/profile', '/@/profile', Record<never, never>, Record<never, never>>,
    '/anunturi': RouteRecordInfo<'/anunturi', '/anunturi', Record<never, never>, Record<never, never>>,
    '/canvas': RouteRecordInfo<'/canvas', '/canvas', Record<never, never>, Record<never, never>>,
    '/code': RouteRecordInfo<'/code', '/code', Record<never, never>, Record<never, never>>,
    '/drive': RouteRecordInfo<'/drive', '/drive', Record<never, never>, Record<never, never>>,
    '/information': RouteRecordInfo<'/information', '/information', Record<never, never>, Record<never, never>>,
    '/inventory': RouteRecordInfo<'/inventory', '/inventory', Record<never, never>, Record<never, never>>,
    '/messages': RouteRecordInfo<'/messages', '/messages', Record<never, never>, Record<never, never>>,
    '/meta-data': RouteRecordInfo<'/meta-data', '/meta-data', Record<never, never>, Record<never, never>>,
    '/moodboard': RouteRecordInfo<'/moodboard', '/moodboard', Record<never, never>, Record<never, never>>,
    '/my-home': RouteRecordInfo<'/my-home', '/my-home', Record<never, never>, Record<never, never>>,
    '/nucet': RouteRecordInfo<'/nucet', '/nucet', Record<never, never>, Record<never, never>>,
    '/nutrition': RouteRecordInfo<'/nutrition', '/nutrition', Record<never, never>, Record<never, never>>,
    '/others/administration/': RouteRecordInfo<'/others/administration/', '/others/administration', Record<never, never>, Record<never, never>>,
    '/others/administration/privacy-policy': RouteRecordInfo<'/others/administration/privacy-policy', '/others/administration/privacy-policy', Record<never, never>, Record<never, never>>,
    '/others/administration/recovery': RouteRecordInfo<'/others/administration/recovery', '/others/administration/recovery', Record<never, never>, Record<never, never>>,
    '/others/administration/terms-of-service': RouteRecordInfo<'/others/administration/terms-of-service', '/others/administration/terms-of-service', Record<never, never>, Record<never, never>>,
    '/others/auth': RouteRecordInfo<'/others/auth', '/others/auth', Record<never, never>, Record<never, never>>,
    '/others/raport-designer': RouteRecordInfo<'/others/raport-designer', '/others/raport-designer', Record<never, never>, Record<never, never>>,
    '/others/tests': RouteRecordInfo<'/others/tests', '/others/tests', Record<never, never>, Record<never, never>>,
    '/others/vote-creator': RouteRecordInfo<'/others/vote-creator', '/others/vote-creator', Record<never, never>, Record<never, never>>,
    '/profile': RouteRecordInfo<'/profile', '/profile', Record<never, never>, Record<never, never>>,
    '/referencer': RouteRecordInfo<'/referencer', '/referencer', Record<never, never>, Record<never, never>>,
    '/reports': RouteRecordInfo<'/reports', '/reports', Record<never, never>, Record<never, never>>,
    '/romania': RouteRecordInfo<'/romania', '/romania', Record<never, never>, Record<never, never>>,
    '/setia': RouteRecordInfo<'/setia', '/setia', Record<never, never>, Record<never, never>>,
    '/settings': RouteRecordInfo<'/settings', '/settings', Record<never, never>, Record<never, never>>,
    '/space-engine': RouteRecordInfo<'/space-engine', '/space-engine', Record<never, never>, Record<never, never>>,
    '/tasks': RouteRecordInfo<'/tasks', '/tasks', Record<never, never>, Record<never, never>>,
    '/tier-list/': RouteRecordInfo<'/tier-list/', '/tier-list', Record<never, never>, Record<never, never>>,
    '/tier-list/[id]': RouteRecordInfo<'/tier-list/[id]', '/tier-list/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/universe/map/': RouteRecordInfo<'/universe/map/', '/universe/map', Record<never, never>, Record<never, never>>,
    '/universe/wiki/': RouteRecordInfo<'/universe/wiki/', '/universe/wiki', Record<never, never>, Record<never, never>>,
    '/universe/wiki/characters/': RouteRecordInfo<'/universe/wiki/characters/', '/universe/wiki/characters', Record<never, never>, Record<never, never>>,
    '/universe/wiki/regions/': RouteRecordInfo<'/universe/wiki/regions/', '/universe/wiki/regions', Record<never, never>, Record<never, never>>,
    '/universe/wiki/weapons/': RouteRecordInfo<'/universe/wiki/weapons/', '/universe/wiki/weapons', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/index.vue': {
      routes: '/'
      views: never
    }
    'src/pages/[...all].vue': {
      routes: '/[...all]'
      views: never
    }
    'src/pages/@/profile.vue': {
      routes: '/@/profile'
      views: never
    }
    'src/pages/anunturi.vue': {
      routes: '/anunturi'
      views: never
    }
    'src/pages/canvas.vue': {
      routes: '/canvas'
      views: never
    }
    'src/pages/code.vue': {
      routes: '/code'
      views: never
    }
    'src/pages/drive.vue': {
      routes: '/drive'
      views: never
    }
    'src/pages/information.vue': {
      routes: '/information'
      views: never
    }
    'src/pages/inventory.vue': {
      routes: '/inventory'
      views: never
    }
    'src/pages/messages.vue': {
      routes: '/messages'
      views: never
    }
    'src/pages/meta-data.vue': {
      routes: '/meta-data'
      views: never
    }
    'src/pages/moodboard.vue': {
      routes: '/moodboard'
      views: never
    }
    'src/pages/my-home.vue': {
      routes: '/my-home'
      views: never
    }
    'src/pages/nucet.vue': {
      routes: '/nucet'
      views: never
    }
    'src/pages/nutrition.vue': {
      routes: '/nutrition'
      views: never
    }
    'src/pages/others/administration/index.vue': {
      routes: '/others/administration/'
      views: never
    }
    'src/pages/others/administration/privacy-policy.vue': {
      routes: '/others/administration/privacy-policy'
      views: never
    }
    'src/pages/others/administration/recovery.vue': {
      routes: '/others/administration/recovery'
      views: never
    }
    'src/pages/others/administration/terms-of-service.vue': {
      routes: '/others/administration/terms-of-service'
      views: never
    }
    'src/pages/others/auth.vue': {
      routes: '/others/auth'
      views: never
    }
    'src/pages/others/raport-designer.vue': {
      routes: '/others/raport-designer'
      views: never
    }
    'src/pages/others/tests.vue': {
      routes: '/others/tests'
      views: never
    }
    'src/pages/others/vote-creator.vue': {
      routes: '/others/vote-creator'
      views: never
    }
    'src/pages/profile.vue': {
      routes: '/profile'
      views: never
    }
    'src/pages/referencer.vue': {
      routes: '/referencer'
      views: never
    }
    'src/pages/reports.vue': {
      routes: '/reports'
      views: never
    }
    'src/pages/romania.vue': {
      routes: '/romania'
      views: never
    }
    'src/pages/setia.vue': {
      routes: '/setia'
      views: never
    }
    'src/pages/settings.vue': {
      routes: '/settings'
      views: never
    }
    'src/pages/space-engine.vue': {
      routes: '/space-engine'
      views: never
    }
    'src/pages/tasks.vue': {
      routes: '/tasks'
      views: never
    }
    'src/pages/tier-list/index.vue': {
      routes: '/tier-list/'
      views: never
    }
    'src/pages/tier-list/[id].vue': {
      routes: '/tier-list/[id]'
      views: never
    }
    'src/pages/universe/map/index.vue': {
      routes: '/universe/map/'
      views: never
    }
    'src/pages/universe/wiki/index.vue': {
      routes: '/universe/wiki/'
      views: never
    }
    'src/pages/universe/wiki/characters/index.vue': {
      routes: '/universe/wiki/characters/'
      views: never
    }
    'src/pages/universe/wiki/regions/index.vue': {
      routes: '/universe/wiki/regions/'
      views: never
    }
    'src/pages/universe/wiki/weapons/index.vue': {
      routes: '/universe/wiki/weapons/'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
