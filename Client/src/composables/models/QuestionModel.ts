/* tslint:disable */
/* eslint-disable */
/**
 * Main | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserModel } from './UserModel';
import {
    UserModelFromJSON,
    UserModelFromJSONTyped,
    UserModelToJSON,
    UserModelToJSONTyped,
} from './UserModel';

/**
 * 
 * @export
 * @interface QuestionModel
 */
export interface QuestionModel {
    /**
     * 
     * @type {string}
     * @memberof QuestionModel
     */
    title: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuestionModel
     */
    comments?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuestionModel
     */
    options?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuestionModel
     */
    selection?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuestionModel
     */
    correctAnswers?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionModel
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof QuestionModel
     */
    executionDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionModel
     */
    authorId?: string | null;
    /**
     * 
     * @type {UserModel}
     * @memberof QuestionModel
     */
    authorData?: UserModel | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuestionModel
     */
    tags?: Array<string> | null;
}

/**
 * Check if a given object implements the QuestionModel interface.
 */
export function instanceOfQuestionModel(value: object): value is QuestionModel {
    if (!('title' in value) || value['title'] === undefined) return false;
    return true;
}

export function QuestionModelFromJSON(json: any): QuestionModel {
    return QuestionModelFromJSONTyped(json, false);
}

export function QuestionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionModel {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'],
        'comments': json['comments'] == null ? undefined : json['comments'],
        'options': json['options'] == null ? undefined : json['options'],
        'selection': json['selection'] == null ? undefined : json['selection'],
        'correctAnswers': json['correctAnswers'] == null ? undefined : json['correctAnswers'],
        'id': json['id'] == null ? undefined : json['id'],
        'executionDate': json['executionDate'] == null ? undefined : (new Date(json['executionDate'])),
        'authorId': json['authorId'] == null ? undefined : json['authorId'],
        'authorData': json['authorData'] == null ? undefined : UserModelFromJSON(json['authorData']),
        'tags': json['tags'] == null ? undefined : json['tags'],
    };
}

export function QuestionModelToJSON(json: any): QuestionModel {
    return QuestionModelToJSONTyped(json, false);
}

export function QuestionModelToJSONTyped(value?: QuestionModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'comments': value['comments'],
        'options': value['options'],
        'selection': value['selection'],
        'correctAnswers': value['correctAnswers'],
        'id': value['id'],
        'executionDate': value['executionDate'] === null ? null : ((value['executionDate'] as any)?.toISOString()),
        'authorId': value['authorId'],
        'authorData': UserModelToJSON(value['authorData']),
        'tags': value['tags'],
    };
}

