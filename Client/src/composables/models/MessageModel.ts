/* tslint:disable */
/* eslint-disable */
/**
 * Main | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { UserModel } from "./UserModel";
import {
  UserModelFromJSON,
  UserModelFromJSONTyped,
  UserModelToJSON,
  UserModelToJSONTyped,
} from "./UserModel";

/**
 *
 * @export
 * @interface MessageModel
 */
export interface MessageModel {
  /**
   *
   * @type {string}
   * @memberof MessageModel
   */
  to?: string | null;
  /**
   *
   * @type {string}
   * @memberof MessageModel
   */
  message: string;
  /**
   *
   * @type {Date}
   * @memberof MessageModel
   */
  sentDate?: Date | null;
  /**
   *
   * @type {Array<string>}
   * @memberof MessageModel
   */
  attachments: Array<string> | null;
  /**
   *
   * @type {string}
   * @memberof MessageModel
   */
  id?: string;
  /**
   *
   * @type {Date}
   * @memberof MessageModel
   */
  executionDate?: Date | null;
  /**
   *
   * @type {string}
   * @memberof MessageModel
   */
  authorId?: string | null;
  /**
   *
   * @type {UserModel}
   * @memberof MessageModel
   */
  authorData?: UserModel | null;
  /**
   *
   * @type {Array<string>}
   * @memberof MessageModel
   */
  tags?: Array<string> | null;
}

/**
 * Check if a given object implements the MessageModel interface.
 */
export function instanceOfMessageModel(value: object): value is MessageModel {
  if (!("message" in value) || value["message"] == undefined) return false;
  if (!("attachments" in value) || value["attachments"] == undefined)
    return false;
  return true;
}

export function MessageModelFromJSON(json: any): MessageModel {
  return MessageModelFromJSONTyped(json, false);
}

export function MessageModelFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): MessageModel {
  if (json == null) {
    return json;
  }
  return {
    to: json["to"] == null ? undefined : json["to"],
    message: json["message"],
    sentDate: json["sentDate"] == null ? undefined : new Date(json["sentDate"]),
    attachments: json["attachments"] == null ? null : json["attachments"],
    id: json["id"] == null ? undefined : json["id"],
    executionDate:
      json["executionDate"] == null
        ? undefined
        : new Date(json["executionDate"]),
    authorId: json["authorId"] == null ? undefined : json["authorId"],
    authorData:
      json["authorData"] == null
        ? undefined
        : UserModelFromJSON(json["authorData"]),
    tags: json["tags"] == null ? undefined : json["tags"],
  };
}

export function MessageModelToJSON(json: any): MessageModel {
  return MessageModelToJSONTyped(json, false);
}

export function MessageModelToJSONTyped(
  value?: MessageModel | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    to: value["to"],
    message: value["message"],
    sentDate:
      value["sentDate"] == null
        ? null
        : (value["sentDate"] as any)?.toISOString(),
    attachments: value["attachments"],
    id: value["id"],
    executionDate:
      value["executionDate"] == null
        ? null
        : (value["executionDate"] as any)?.toISOString(),
    authorId: value["authorId"],
    authorData: UserModelToJSON(value["authorData"]),
    tags: value["tags"],
  };
}
