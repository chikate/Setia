/* tslint:disable */
/* eslint-disable */
/**
 * Main | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DriveInfoDTO,
} from '../models/index';
import {
    DriveInfoDTOFromJSON,
    DriveInfoDTOToJSON,
} from '../models/index';

export interface ApiDriveDeleteDeleteRequest {
    filePath?: string;
}

export interface ApiDriveDownloadGetRequest {
    filePath?: string;
}

export interface ApiDriveGetFolderContentGetRequest {
    filePath?: string;
}

export interface ApiDriveSearchGetRequest {
    input?: string;
}

export interface ApiDriveUploadPostRequest {
    saveToPath?: string;
    contentType?: string;
    contentDisposition?: string;
    headers?: { [key: string]: Array<string>; };
    length?: number;
    name?: string;
    fileName?: string;
}

/**
 * 
 */
export class DriveApi extends runtime.BaseAPI {

    /**
     */
    async apiDriveDeleteDeleteRaw(requestParameters: ApiDriveDeleteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        if (requestParameters['filePath'] != null) {
            queryParameters['filePath'] = requestParameters['filePath'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Drive/Delete`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiDriveDeleteDelete(requestParameters: ApiDriveDeleteDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.apiDriveDeleteDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiDriveDownloadGetRaw(requestParameters: ApiDriveDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['filePath'] != null) {
            queryParameters['filePath'] = requestParameters['filePath'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Drive/Download`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiDriveDownloadGet(requestParameters: ApiDriveDownloadGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDriveDownloadGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiDriveGetAllPartitionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DriveInfoDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Drive/GetAllPartitions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DriveInfoDTOFromJSON));
    }

    /**
     */
    async apiDriveGetAllPartitionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DriveInfoDTO>> {
        const response = await this.apiDriveGetAllPartitionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiDriveGetBasePathGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Drive/GetBasePath`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiDriveGetBasePathGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiDriveGetBasePathGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiDriveGetFolderContentGetRaw(requestParameters: ApiDriveGetFolderContentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        if (requestParameters['filePath'] != null) {
            queryParameters['filePath'] = requestParameters['filePath'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Drive/GetFolderContent`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiDriveGetFolderContentGet(requestParameters: ApiDriveGetFolderContentGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.apiDriveGetFolderContentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiDriveSearchGetRaw(requestParameters: ApiDriveSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['input'] != null) {
            queryParameters['input'] = requestParameters['input'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Drive/Search`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiDriveSearchGet(requestParameters: ApiDriveSearchGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiDriveSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiDriveUploadPostRaw(requestParameters: ApiDriveUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['saveToPath'] != null) {
            queryParameters['saveToPath'] = requestParameters['saveToPath'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['contentType'] != null) {
            formParams.append('ContentType', requestParameters['contentType'] as any);
        }

        if (requestParameters['contentDisposition'] != null) {
            formParams.append('ContentDisposition', requestParameters['contentDisposition'] as any);
        }

        if (requestParameters['headers'] != null) {
            formParams.append('Headers', new Blob([JSON.stringify(stringToJSON(requestParameters['headers']))], { type: "application/json", }));
                    }

        if (requestParameters['length'] != null) {
            formParams.append('Length', requestParameters['length'] as any);
        }

        if (requestParameters['name'] != null) {
            formParams.append('Name', requestParameters['name'] as any);
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('FileName', requestParameters['fileName'] as any);
        }


        let urlPath = `/api/Drive/Upload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiDriveUploadPost(requestParameters: ApiDriveUploadPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiDriveUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
