/* tslint:disable */
/* eslint-disable */
/**
 * Main | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthenticationDTO,
  UserModel2,
} from '../models/index';
import {
    AuthenticationDTOFromJSON,
    AuthenticationDTOToJSON,
    UserModel2FromJSON,
    UserModel2ToJSON,
} from '../models/index';

export interface ApiAuthLoginPostRequest {
    authenticationDTO: AuthenticationDTO;
}

export interface ApiAuthRecoverAccountGetRequest {
    email?: string;
}

export interface ApiAuthRegisterGetRequest {
    username?: string;
    password?: string;
    email?: string;
    signiture?: string;
    birthDay?: Date;
    name?: string;
    avatar?: string;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async apiAuthLoginPostRaw(requestParameters: ApiAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['authenticationDTO'] == null) {
            throw new runtime.RequiredError(
                'authenticationDTO',
                'Required parameter "authenticationDTO" was null or undefined when calling apiAuthLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Auth/Login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationDTOToJSON(requestParameters['authenticationDTO']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiAuthLoginPost(requestParameters: ApiAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiAuthLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthRecoverAccountGetRaw(requestParameters: ApiAuthRecoverAccountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['email'] != null) {
            queryParameters['Email'] = requestParameters['email'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Auth/RecoverAccount`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthRecoverAccountGet(requestParameters: ApiAuthRecoverAccountGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthRecoverAccountGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAuthRegisterGetRaw(requestParameters: ApiAuthRegisterGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserModel2>> {
        const queryParameters: any = {};

        if (requestParameters['username'] != null) {
            queryParameters['Username'] = requestParameters['username'];
        }

        if (requestParameters['password'] != null) {
            queryParameters['Password'] = requestParameters['password'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['Email'] = requestParameters['email'];
        }

        if (requestParameters['signiture'] != null) {
            queryParameters['Signiture'] = requestParameters['signiture'];
        }

        if (requestParameters['birthDay'] != null) {
            queryParameters['BirthDay'] = (requestParameters['birthDay'] as any).toISOString();
        }

        if (requestParameters['name'] != null) {
            queryParameters['Name'] = requestParameters['name'];
        }

        if (requestParameters['avatar'] != null) {
            queryParameters['Avatar'] = requestParameters['avatar'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Auth/Register`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserModel2FromJSON(jsonValue));
    }

    /**
     */
    async apiAuthRegisterGet(requestParameters: ApiAuthRegisterGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserModel2> {
        const response = await this.apiAuthRegisterGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
