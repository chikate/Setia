/* tslint:disable */
/* eslint-disable */
/**
 * Main | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MessageModel,
} from '../models/index';
import {
    MessageModelFromJSON,
    MessageModelToJSON,
} from '../models/index';

export interface ApiPostsAddPostRequest {
    messageModel: Array<MessageModel>;
}

export interface ApiPostsDeleteDeleteRequest {
    requestBody: Array<string>;
}

export interface ApiPostsGetGetRequest {
    items?: Array<MessageModel>;
    pageSize?: number;
    pageNumber?: number;
}

export interface ApiPostsUpdatePutRequest {
    messageModel: Array<MessageModel>;
}

/**
 * 
 */
export class PostsApi extends runtime.BaseAPI {

    /**
     */
    async apiPostsAddPostRaw(requestParameters: ApiPostsAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MessageModel>>> {
        if (requestParameters['messageModel'] == null) {
            throw new runtime.RequiredError(
                'messageModel',
                'Required parameter "messageModel" was null or undefined when calling apiPostsAddPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Posts/Add`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['messageModel']!.map(MessageModelToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MessageModelFromJSON));
    }

    /**
     */
    async apiPostsAddPost(requestParameters: ApiPostsAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MessageModel>> {
        const response = await this.apiPostsAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPostsDeleteDeleteRaw(requestParameters: ApiPostsDeleteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MessageModel>>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling apiPostsDeleteDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Posts/Delete`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MessageModelFromJSON));
    }

    /**
     */
    async apiPostsDeleteDelete(requestParameters: ApiPostsDeleteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MessageModel>> {
        const response = await this.apiPostsDeleteDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPostsGetGetRaw(requestParameters: ApiPostsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MessageModel>>> {
        const queryParameters: any = {};

        if (requestParameters['items'] != null) {
            queryParameters['Items'] = requestParameters['items'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['PageNumber'] = requestParameters['pageNumber'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Posts/Get`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MessageModelFromJSON));
    }

    /**
     */
    async apiPostsGetGet(requestParameters: ApiPostsGetGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MessageModel>> {
        const response = await this.apiPostsGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPostsUpdatePutRaw(requestParameters: ApiPostsUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['messageModel'] == null) {
            throw new runtime.RequiredError(
                'messageModel',
                'Required parameter "messageModel" was null or undefined when calling apiPostsUpdatePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Posts/Update`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['messageModel']!.map(MessageModelToJSON),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiPostsUpdatePut(requestParameters: ApiPostsUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.apiPostsUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
