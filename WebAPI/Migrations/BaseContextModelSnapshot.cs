// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Setia.Contexts.Base;

#nullable disable

namespace Base.Migrations
{
    [DbContext(typeof(BaseContext))]
    partial class BaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("base")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "ltree");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Setia.Models.Base.AuditModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EntityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Audit", "base");
                });

            modelBuilder.Entity("Setia.Models.Base.TagModel", b =>
                {
                    b.Property<string>("Tag")
                        .HasColumnType("ltree");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Tag");

                    b.HasIndex("AuthorId");

                    b.ToTable("Tags", "base");

                    b.HasData(
                        new
                        {
                            Tag = "Role.Admin",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 5, 2, 12, 16, 16, 263, DateTimeKind.Utc).AddTicks(6969)
                        },
                        new
                        {
                            Tag = "CRUD1.Get",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 5, 2, 12, 16, 16, 263, DateTimeKind.Utc).AddTicks(7754)
                        },
                        new
                        {
                            Tag = "CRUD1.Add",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 5, 2, 12, 16, 16, 263, DateTimeKind.Utc).AddTicks(7792)
                        },
                        new
                        {
                            Tag = "CRUD1.Update",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 5, 2, 12, 16, 16, 263, DateTimeKind.Utc).AddTicks(8146)
                        },
                        new
                        {
                            Tag = "CRUD1.Delete",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 5, 2, 12, 16, 16, 263, DateTimeKind.Utc).AddTicks(8260)
                        },
                        new
                        {
                            Tag = "Helper.Upload",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 5, 2, 12, 16, 16, 263, DateTimeKind.Utc).AddTicks(8759)
                        },
                        new
                        {
                            Tag = "Helper.GetUserTags",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 5, 2, 12, 16, 16, 263, DateTimeKind.Utc).AddTicks(8781)
                        });
                });

            modelBuilder.Entity("Setia.Models.Base.UserModel", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EmailVerifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Email");

                    b.HasIndex("AuthorId");

                    b.ToTable("Users", "base");

                    b.HasData(
                        new
                        {
                            Email = "",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 5, 2, 12, 16, 16, 263, DateTimeKind.Utc).AddTicks(6350),
                            Name = "Test Name",
                            Password = "FD5CB51BAFD60F6FDBEDDE6E62C473DA6F247DB271633E15919BAB78A02EE9EB",
                            Username = "testUser"
                        });
                });

            modelBuilder.Entity("Setia.Models.Base.UserTagModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("ltree");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("UserTags", "base");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07190912-34dd-462f-853e-6671f6c3992a"),
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 5, 2, 12, 16, 16, 263, DateTimeKind.Utc).AddTicks(6943),
                            Tag = "Role.Admin",
                            User = "testUser"
                        },
                        new
                        {
                            Id = new Guid("f29afff1-488b-4612-a3c2-1ca8e34e6e2c"),
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 5, 2, 12, 16, 16, 263, DateTimeKind.Utc).AddTicks(6958),
                            Tag = "Dragos",
                            User = "testUser"
                        });
                });

            modelBuilder.Entity("Setia.Models.Base.AuditModel", b =>
                {
                    b.HasOne("Setia.Models.Base.UserModel", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Setia.Models.Base.TagModel", b =>
                {
                    b.HasOne("Setia.Models.Base.UserModel", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Setia.Models.Base.UserModel", b =>
                {
                    b.HasOne("Setia.Models.Base.UserModel", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Setia.Models.Base.UserTagModel", b =>
                {
                    b.HasOne("Setia.Models.Base.UserModel", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });
#pragma warning restore 612, 618
        }
    }
}
