// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Setia.Contexts.Base;

#nullable disable

namespace Base.Migrations
{
    [DbContext(typeof(BaseContext))]
    partial class BaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("base")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "ltree");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Setia.Models.Base.AuditModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .HasColumnType("text");

                    b.Property<string>("EntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Audit", "base");
                });

            modelBuilder.Entity("Setia.Models.Base.NotificationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserDataId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserDataId");

                    b.ToTable("Notifications", "base");
                });

            modelBuilder.Entity("Setia.Models.Base.TagModel", b =>
                {
                    b.Property<string>("Tag")
                        .HasColumnType("ltree");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Tag");

                    b.ToTable("Tags", "base");

                    b.HasData(
                        new
                        {
                            Tag = "Role.Admin",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(4626)
                        },
                        new
                        {
                            Tag = "Controller.CRUD1.Get",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(5297)
                        },
                        new
                        {
                            Tag = "Controller.CRUD1.Add",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(5337)
                        },
                        new
                        {
                            Tag = "Controller.CRUD1.Update",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(5381)
                        },
                        new
                        {
                            Tag = "Controller.CRUD1.Delete",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(5404)
                        },
                        new
                        {
                            Tag = "Controller.Auth.Login",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(5508)
                        },
                        new
                        {
                            Tag = "Controller.Auth.Register",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(5552)
                        },
                        new
                        {
                            Tag = "Controller.Auth.CheckUserRights",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(5576)
                        },
                        new
                        {
                            Tag = "Controller.Helper.Upload",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(6206)
                        },
                        new
                        {
                            Tag = "Controller.Helper.GetUserTags",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(6229)
                        },
                        new
                        {
                            Tag = "Controller.Helper.GetUserProfile",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(6252)
                        },
                        new
                        {
                            Tag = "Controller.Helper.GetPostsForUser",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(6293)
                        },
                        new
                        {
                            Tag = "Controller.Helper.UpdateCurentUserAvatar",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(6316)
                        },
                        new
                        {
                            Tag = "Controller.Helper.SendFriendRequest",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(6358)
                        },
                        new
                        {
                            Tag = "Controller.Helper.AcceptFriendRequest",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(6381)
                        });
                });

            modelBuilder.Entity("Setia.Models.Base.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EmailVerifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<Guid>>("Friends")
                        .HasColumnType("uuid[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Signiture")
                        .HasColumnType("text");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", "base");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06fda06e-fbf9-4ba7-b16f-0ffb4f60834b"),
                            Email = "",
                            ExecutionDate = new DateTime(2024, 6, 18, 19, 35, 30, 723, DateTimeKind.Utc).AddTicks(4113),
                            Name = "Test Name",
                            Password = "FD5CB51BAFD60F6FDBEDDE6E62C473DA6F247DB271633E15919BAB78A02EE9EB",
                            Tags = new List<string> { "Dragos" },
                            Username = "testUser"
                        });
                });

            modelBuilder.Entity("Setia.Models.Base.NotificationModel", b =>
                {
                    b.HasOne("Setia.Models.Base.UserModel", "UserData")
                        .WithMany()
                        .HasForeignKey("UserDataId");

                    b.Navigation("UserData");
                });
#pragma warning restore 612, 618
        }
    }
}
