// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Setia.Contexts.Base;

#nullable disable

namespace Base.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20240601223438_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("base")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "ltree");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Setia.Models.Base.AuditModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .HasColumnType("text");

                    b.Property<string>("EntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Audit", "base");
                });

            modelBuilder.Entity("Setia.Models.Base.NotificationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notifications", "base");
                });

            modelBuilder.Entity("Setia.Models.Base.TagModel", b =>
                {
                    b.Property<string>("Tag")
                        .HasColumnType("ltree");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Tag");

                    b.ToTable("Tags", "base");

                    b.HasData(
                        new
                        {
                            Tag = "Role.Admin",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 6, 2, 1, 34, 38, 561, DateTimeKind.Utc).AddTicks(8421)
                        },
                        new
                        {
                            Tag = "Controller.CRUD1.Get",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 6, 2, 1, 34, 38, 561, DateTimeKind.Utc).AddTicks(9170)
                        },
                        new
                        {
                            Tag = "Controller.CRUD1.Add",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 6, 2, 1, 34, 38, 561, DateTimeKind.Utc).AddTicks(9211)
                        },
                        new
                        {
                            Tag = "Controller.CRUD1.Update",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 6, 2, 1, 34, 38, 561, DateTimeKind.Utc).AddTicks(9236)
                        },
                        new
                        {
                            Tag = "Controller.CRUD1.Delete",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 6, 2, 1, 34, 38, 561, DateTimeKind.Utc).AddTicks(9280)
                        },
                        new
                        {
                            Tag = "Controller.Auth.Login",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 6, 2, 1, 34, 38, 561, DateTimeKind.Utc).AddTicks(9395)
                        },
                        new
                        {
                            Tag = "Controller.Auth.Register",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 6, 2, 1, 34, 38, 561, DateTimeKind.Utc).AddTicks(9418)
                        },
                        new
                        {
                            Tag = "Controller.Auth.CheckUserRights",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 6, 2, 1, 34, 38, 561, DateTimeKind.Utc).AddTicks(9460)
                        },
                        new
                        {
                            Tag = "Controller.Helper.Upload",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 6, 2, 1, 34, 38, 562, DateTimeKind.Utc).AddTicks(245)
                        },
                        new
                        {
                            Tag = "Controller.Helper.GetUserTags",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 6, 2, 1, 34, 38, 562, DateTimeKind.Utc).AddTicks(302)
                        },
                        new
                        {
                            Tag = "Controller.Quizz.Upload",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 6, 2, 1, 34, 38, 562, DateTimeKind.Utc).AddTicks(399)
                        },
                        new
                        {
                            Tag = "Controller.Quizz.GetUserTags",
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 6, 2, 1, 34, 38, 562, DateTimeKind.Utc).AddTicks(421)
                        });
                });

            modelBuilder.Entity("Setia.Models.Base.UserModel", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EmailVerifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Username");

                    b.ToTable("Users", "base");

                    b.HasData(
                        new
                        {
                            Username = "testUser",
                            Active = true,
                            Deleted = false,
                            Email = "",
                            ExecutionDate = new DateTime(2024, 6, 2, 1, 34, 38, 561, DateTimeKind.Utc).AddTicks(7846),
                            Name = "Test Name",
                            Password = "FD5CB51BAFD60F6FDBEDDE6E62C473DA6F247DB271633E15919BAB78A02EE9EB"
                        });
                });

            modelBuilder.Entity("Setia.Models.Base.UserTagModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("ltree");

                    b.Property<string>("TagDataTag")
                        .HasColumnType("ltree");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserDataUsername")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TagDataTag");

                    b.HasIndex("UserDataUsername");

                    b.ToTable("UserTags", "base");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78d066c8-877a-4832-b667-9f37017e8ee2"),
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 6, 2, 1, 34, 38, 561, DateTimeKind.Utc).AddTicks(8394),
                            Tag = "Role.Admin",
                            User = "testUser"
                        },
                        new
                        {
                            Id = new Guid("6fe9262c-f838-4f76-9041-8e598ee593fa"),
                            Active = true,
                            Deleted = false,
                            ExecutionDate = new DateTime(2024, 6, 2, 1, 34, 38, 561, DateTimeKind.Utc).AddTicks(8410),
                            Tag = "Dragos",
                            User = "testUser"
                        });
                });

            modelBuilder.Entity("Setia.Models.Base.UserTagModel", b =>
                {
                    b.HasOne("Setia.Models.Base.TagModel", "TagData")
                        .WithMany()
                        .HasForeignKey("TagDataTag");

                    b.HasOne("Setia.Models.Base.UserModel", "UserData")
                        .WithMany()
                        .HasForeignKey("UserDataUsername");

                    b.Navigation("TagData");

                    b.Navigation("UserData");
                });
#pragma warning restore 612, 618
        }
    }
}
