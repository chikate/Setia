# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Dragos DEMO

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  Build:
    runs-on: ubuntu-latest
    # environment: DEV
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Init Node
        run: |
          cd UI
          npm install
          npm run build

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Init .NET
        run: |
          # Set the PATH to include the directory for dotnet and other tools
          export PATH="/usr/local/bin/dotnet:$PATH"

          # Change directory to the workspace
          cd "$WORKSPACE/WebAPI"

          # Restore and publish the .NET application
          dotnet restore

          # Build the project
          dotnet build --configuration Release

          # Run tests without building again
          dotnet test --no-build --verbosity normal

          # Publish the application
          dotnet publish -r linux-x64 --self-contained true --configuration Release --output "$WORKSPACE/publish" -p:EnvironmentName=development

          # Synchronize the directories using rsync
          rsync -av --delete "$WORKSPACE/UI/dist/" "$WORKSPACE/publish/dist/"

          # Set the variables
          MACHINE_NAME="DEV-Setia"
          SITE_FOLDER="Setia/Dev"
          SITE_NAME="Setia"

          # Use SSH to execute remote commands (you must have SSH access set up)
          ssh $MACHINE_NAME << EOF
          # Stop the application pool (assuming a similar service exists on Linux)
              sudo systemctl stop $SITE_NAME

              # Use find and rm to delete specific folders
              find "/var/www/html/$SITE_FOLDER" -type d \( -name "_config" -o -name "LOGS" \) -exec rm -r {} +

              # Copy the published files to the remote server
              rsync -av --delete "$WORKSPACE/publish/" "$MACHINE_NAME:/var/www/html/$SITE_FOLDER/"

              # Start the application pool
              sudo systemctl start $SITE_NAME
          EOF

          # Check the exit status and handle errors
          if [ $? -ne 0 ]; then
              echo "Failed with error code $?."
              exit 1
          fi

          dotnet restore
          dotnet build --no-restore
          dotnet test --no-build --verbosity normal
