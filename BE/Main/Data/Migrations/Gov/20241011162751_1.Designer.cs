// <auto-generated />
using System;
using System.Collections.Generic;
using Main.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Main.Data.Migrations.Gov
{
    [DbContext(typeof(GovContext))]
    [Migration("20241011162751_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("gov")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Main.Data.Models.Base.AuditModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuthorDataId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .HasColumnType("text");

                    b.Property<string>("EntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("AuthorDataId");

                    b.ToTable("AuditModel", "gov");
                });

            modelBuilder.Entity("Main.Data.Models.IntervalModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long?>("AuthorDataId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.Property<long?>("UserDataId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorDataId");

                    b.HasIndex("UserDataId");

                    b.ToTable("Pontaj", "gov");
                });

            modelBuilder.Entity("Main.Data.Models.PostModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long?>("AuthorDataId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("AuthorDataId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Posts", "gov");
                });

            modelBuilder.Entity("Main.Data.Models.QuestionAnswerModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Answer")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<long?>("AuthorDataId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("AuthorDataId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswers", "gov");
                });

            modelBuilder.Entity("Main.Data.Models.QuestionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long?>("AuthorDataId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("EndOption")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("Options")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Selection")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorDataId");

                    b.ToTable("Questions", "gov");
                });

            modelBuilder.Entity("Main.Data.Models.Base.AuditModel", b =>
                {
                    b.HasOne("Main.Data.Models.Base.AuditModel", "AuthorData")
                        .WithMany()
                        .HasForeignKey("AuthorDataId");

                    b.Navigation("AuthorData");
                });

            modelBuilder.Entity("Main.Data.Models.IntervalModel", b =>
                {
                    b.HasOne("Main.Data.Models.Base.AuditModel", "AuthorData")
                        .WithMany()
                        .HasForeignKey("AuthorDataId");

                    b.HasOne("Main.Data.Models.Base.AuditModel", "UserData")
                        .WithMany()
                        .HasForeignKey("UserDataId");

                    b.Navigation("AuthorData");

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("Main.Data.Models.PostModel", b =>
                {
                    b.HasOne("Main.Data.Models.Base.AuditModel", "AuthorData")
                        .WithMany()
                        .HasForeignKey("AuthorDataId");

                    b.HasOne("Main.Data.Models.QuestionModel", "QuestionData")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_Post_Question");

                    b.Navigation("AuthorData");

                    b.Navigation("QuestionData");
                });

            modelBuilder.Entity("Main.Data.Models.QuestionAnswerModel", b =>
                {
                    b.HasOne("Main.Data.Models.Base.AuditModel", "AuthorData")
                        .WithMany()
                        .HasForeignKey("AuthorDataId");

                    b.HasOne("Main.Data.Models.QuestionModel", "QuestionData")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_QuestionAnswer_Question");

                    b.Navigation("AuthorData");

                    b.Navigation("QuestionData");
                });

            modelBuilder.Entity("Main.Data.Models.QuestionModel", b =>
                {
                    b.HasOne("Main.Data.Models.Base.AuditModel", "AuthorData")
                        .WithMany()
                        .HasForeignKey("AuthorDataId");

                    b.Navigation("AuthorData");
                });
#pragma warning restore 612, 618
        }
    }
}
