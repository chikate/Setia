/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by unplugin-auto-import
// biome-ignore lint: disable
export {}
declare global {
  const AuthService: (typeof import('./src/global/services'))['AuthService']
  const DEFAULT_ROWS_INDEX: typeof import('./src/globals/config')['DEFAULT_ROWS_INDEX']
  const DEFAULT_ROWS_OPTIONS: typeof import('./src/globals/config')['DEFAULT_ROWS_OPTIONS']
  const EffectScope: typeof import('vue')['EffectScope']
  const FILE_ICONS: typeof import('./src/globals/config')['FILE_ICONS']
  const FileManager: (typeof import('./src/global/services'))['FileManager']
  const HelperService: (typeof import('./src/global/services'))['HelperService']
  const INPUT_CLASS: typeof import('./src/globals/config')['INPUT_CLASS']
  const MENU_ICONS: typeof import('./src/globals/config')['MENU_ICONS']
  const TOAST_LIFETIME: typeof import('./src/globals/config')['TOAST_LIFETIME']
  const apiRequest: typeof import('./src/globals/helpers')['apiRequest']
  const authService: typeof import('./src/globals/services')['authService']
  const canUserAccessRoute: typeof import('./src/globals/helpers')['canUserAccessRoute']
  const capitalizeString: typeof import('./src/globals/helpers')['capitalizeString']
  const capitalizeWords: typeof import('./src/globals/helpers')['capitalizeWords']
  const computed: typeof import('vue')['computed']
  const connection: typeof import('./src/globals/signals.ts')['connection']
  const createApp: typeof import('vue')['createApp']
  const customRef: typeof import('vue')['customRef']
  const defineAsyncComponent: typeof import('vue')['defineAsyncComponent']
  const defineComponent: typeof import('vue')['defineComponent']
  const downloadInBrowser: typeof import('./src/globals/helpers')['downloadInBrowser']
  const effectScope: typeof import('vue')['effectScope']
  const fileManager: typeof import('./src/globals/services')['fileManager']
  const getCurrentInstance: typeof import('vue')['getCurrentInstance']
  const getCurrentScope: typeof import('vue')['getCurrentScope']
  const h: typeof import('vue')['h']
  const helperService: typeof import('./src/globals/services')['helperService']
  const inject: typeof import('vue')['inject']
  const isProxy: typeof import('vue')['isProxy']
  const isReactive: typeof import('vue')['isReactive']
  const isReadonly: typeof import('vue')['isReadonly']
  const isRef: typeof import('vue')['isRef']
  const isValidISODate: typeof import('./src/globals/helpers')['isValidISODate']
  const markRaw: typeof import('vue')['markRaw']
  const nextTick: typeof import('vue')['nextTick']
  const notificationsCRUDService: typeof import('./src/globals/services')['notificationsCRUDService']
  const notificationsConnection: typeof import('./src/globals/signals.ts')['notificationsConnection']
  const onActivated: typeof import('vue')['onActivated']
  const onBeforeMount: typeof import('vue')['onBeforeMount']
  const onBeforeRouteLeave: typeof import('vue-router')['onBeforeRouteLeave']
  const onBeforeRouteUpdate: typeof import('vue-router')['onBeforeRouteUpdate']
  const onBeforeUnmount: typeof import('vue')['onBeforeUnmount']
  const onBeforeUpdate: typeof import('vue')['onBeforeUpdate']
  const onDeactivated: typeof import('vue')['onDeactivated']
  const onErrorCaptured: typeof import('vue')['onErrorCaptured']
  const onMounted: typeof import('vue')['onMounted']
  const onRenderTracked: typeof import('vue')['onRenderTracked']
  const onRenderTriggered: typeof import('vue')['onRenderTriggered']
  const onScopeDispose: typeof import('vue')['onScopeDispose']
  const onServerPrefetch: typeof import('vue')['onServerPrefetch']
  const onUnmounted: typeof import('vue')['onUnmounted']
  const onUpdated: typeof import('vue')['onUpdated']
  const onWatcherCleanup: typeof import('vue')['onWatcherCleanup']
  const pontajCRUDService: typeof import('./src/globals/services')['pontajCRUDService']
  const postsCRUDService: typeof import('./src/globals/services')['postsCRUDService']
  const provide: typeof import('vue')['provide']
  const questionAnswersCRUDService: typeof import('./src/globals/services')['questionAnswersCRUDService']
  const questionsCRUDService: typeof import('./src/globals/services')['questionsCRUDService']
  const reactive: typeof import('vue')['reactive']
  const readonly: typeof import('vue')['readonly']
  const ref: typeof import('vue')['ref']
  const resolveComponent: typeof import('vue')['resolveComponent']
  const shallowReactive: typeof import('vue')['shallowReactive']
  const shallowReadonly: typeof import('vue')['shallowReadonly']
  const shallowRef: typeof import('vue')['shallowRef']
  const signalRConnection: typeof import('./src/globals/services')['signalRConnection']
  const stringToColor: typeof import('./src/globals/helpers')['stringToColor']
  const tagsCRUDService: typeof import('./src/globals/services')['tagsCRUDService']
  const toRaw: typeof import('vue')['toRaw']
  const toRef: typeof import('vue')['toRef']
  const toRefs: typeof import('vue')['toRefs']
  const toValue: typeof import('vue')['toValue']
  const triggerRef: typeof import('vue')['triggerRef']
  const unref: typeof import('vue')['unref']
  const useAttrs: typeof import('vue')['useAttrs']
  const useCssModule: typeof import('vue')['useCssModule']
  const useCssVars: typeof import('vue')['useCssVars']
  const useId: typeof import('vue')['useId']
  const useLink: typeof import('vue-router')['useLink']
  const useModel: typeof import('vue')['useModel']
  const useRoute: typeof import('vue-router')['useRoute']
  const useRouter: typeof import('vue-router')['useRouter']
  const useSlots: typeof import('vue')['useSlots']
  const useTemplateRef: typeof import('vue')['useTemplateRef']
  const userCollectionCRUDService: typeof import('./src/globals/services')['userCollectionCRUDService']
  const usersCRUDService: typeof import('./src/globals/services')['usersCRUDService']
  const watch: typeof import('vue')['watch']
  const watchEffect: typeof import('vue')['watchEffect']
  const watchPostEffect: typeof import('vue')['watchPostEffect']
  const watchSyncEffect: typeof import('vue')['watchSyncEffect']
}
// for type re-export
declare global {
  // @ts-ignore
  export type { Component, ComponentPublicInstance, ComputedRef, DirectiveBinding, ExtractDefaultPropTypes, ExtractPropTypes, ExtractPublicPropTypes, InjectionKey, PropType, Ref, MaybeRef, MaybeRefOrGetter, VNode, WritableComputedRef } from 'vue'
  import('vue')
  // @ts-ignore
  export type { IAuthenticationDTO, IBaseAudit, IDefinition, User, Post, Pontaj, Taging, Question, QuestionAnswer, UserTag, UserCollection, INotification } from './src/globals/interfaces'
  import('./src/globals/interfaces')
}

// for vue template auto import
import { UnwrapRef } from 'vue'
declare module 'vue' {
  interface GlobalComponents {}
  interface ComponentCustomProperties {
    readonly DEFAULT_ROWS_INDEX: UnwrapRef<typeof import('./src/globals/config')['DEFAULT_ROWS_INDEX']>
    readonly DEFAULT_ROWS_OPTIONS: UnwrapRef<typeof import('./src/globals/config')['DEFAULT_ROWS_OPTIONS']>
    readonly EffectScope: UnwrapRef<typeof import('vue')['EffectScope']>
    readonly FILE_ICONS: UnwrapRef<typeof import('./src/globals/config')['FILE_ICONS']>
    readonly INPUT_CLASS: UnwrapRef<typeof import('./src/globals/config')['INPUT_CLASS']>
    readonly MENU_ICONS: UnwrapRef<typeof import('./src/globals/config')['MENU_ICONS']>
    readonly TOAST_LIFETIME: UnwrapRef<typeof import('./src/globals/config')['TOAST_LIFETIME']>
    readonly apiRequest: UnwrapRef<typeof import('./src/globals/helpers')['apiRequest']>
    readonly authService: UnwrapRef<typeof import('./src/globals/services')['authService']>
    readonly canUserAccessRoute: UnwrapRef<typeof import('./src/globals/helpers')['canUserAccessRoute']>
    readonly capitalizeString: UnwrapRef<typeof import('./src/globals/helpers')['capitalizeString']>
    readonly capitalizeWords: UnwrapRef<typeof import('./src/globals/helpers')['capitalizeWords']>
    readonly computed: UnwrapRef<typeof import('vue')['computed']>
    readonly createApp: UnwrapRef<typeof import('vue')['createApp']>
    readonly customRef: UnwrapRef<typeof import('vue')['customRef']>
    readonly defineAsyncComponent: UnwrapRef<typeof import('vue')['defineAsyncComponent']>
    readonly defineComponent: UnwrapRef<typeof import('vue')['defineComponent']>
    readonly downloadInBrowser: UnwrapRef<typeof import('./src/globals/helpers')['downloadInBrowser']>
    readonly effectScope: UnwrapRef<typeof import('vue')['effectScope']>
    readonly fileManager: UnwrapRef<typeof import('./src/globals/services')['fileManager']>
    readonly getCurrentInstance: UnwrapRef<typeof import('vue')['getCurrentInstance']>
    readonly getCurrentScope: UnwrapRef<typeof import('vue')['getCurrentScope']>
    readonly h: UnwrapRef<typeof import('vue')['h']>
    readonly helperService: UnwrapRef<typeof import('./src/globals/services')['helperService']>
    readonly inject: UnwrapRef<typeof import('vue')['inject']>
    readonly isProxy: UnwrapRef<typeof import('vue')['isProxy']>
    readonly isReactive: UnwrapRef<typeof import('vue')['isReactive']>
    readonly isReadonly: UnwrapRef<typeof import('vue')['isReadonly']>
    readonly isRef: UnwrapRef<typeof import('vue')['isRef']>
    readonly isValidISODate: UnwrapRef<typeof import('./src/globals/helpers')['isValidISODate']>
    readonly markRaw: UnwrapRef<typeof import('vue')['markRaw']>
    readonly nextTick: UnwrapRef<typeof import('vue')['nextTick']>
    readonly notificationsCRUDService: UnwrapRef<typeof import('./src/globals/services')['notificationsCRUDService']>
    readonly onActivated: UnwrapRef<typeof import('vue')['onActivated']>
    readonly onBeforeMount: UnwrapRef<typeof import('vue')['onBeforeMount']>
    readonly onBeforeRouteLeave: UnwrapRef<typeof import('vue-router')['onBeforeRouteLeave']>
    readonly onBeforeRouteUpdate: UnwrapRef<typeof import('vue-router')['onBeforeRouteUpdate']>
    readonly onBeforeUnmount: UnwrapRef<typeof import('vue')['onBeforeUnmount']>
    readonly onBeforeUpdate: UnwrapRef<typeof import('vue')['onBeforeUpdate']>
    readonly onDeactivated: UnwrapRef<typeof import('vue')['onDeactivated']>
    readonly onErrorCaptured: UnwrapRef<typeof import('vue')['onErrorCaptured']>
    readonly onMounted: UnwrapRef<typeof import('vue')['onMounted']>
    readonly onRenderTracked: UnwrapRef<typeof import('vue')['onRenderTracked']>
    readonly onRenderTriggered: UnwrapRef<typeof import('vue')['onRenderTriggered']>
    readonly onScopeDispose: UnwrapRef<typeof import('vue')['onScopeDispose']>
    readonly onServerPrefetch: UnwrapRef<typeof import('vue')['onServerPrefetch']>
    readonly onUnmounted: UnwrapRef<typeof import('vue')['onUnmounted']>
    readonly onUpdated: UnwrapRef<typeof import('vue')['onUpdated']>
    readonly onWatcherCleanup: UnwrapRef<typeof import('vue')['onWatcherCleanup']>
    readonly pontajCRUDService: UnwrapRef<typeof import('./src/globals/services')['pontajCRUDService']>
    readonly postsCRUDService: UnwrapRef<typeof import('./src/globals/services')['postsCRUDService']>
    readonly provide: UnwrapRef<typeof import('vue')['provide']>
    readonly questionAnswersCRUDService: UnwrapRef<typeof import('./src/globals/services')['questionAnswersCRUDService']>
    readonly questionsCRUDService: UnwrapRef<typeof import('./src/globals/services')['questionsCRUDService']>
    readonly reactive: UnwrapRef<typeof import('vue')['reactive']>
    readonly readonly: UnwrapRef<typeof import('vue')['readonly']>
    readonly ref: UnwrapRef<typeof import('vue')['ref']>
    readonly resolveComponent: UnwrapRef<typeof import('vue')['resolveComponent']>
    readonly shallowReactive: UnwrapRef<typeof import('vue')['shallowReactive']>
    readonly shallowReadonly: UnwrapRef<typeof import('vue')['shallowReadonly']>
    readonly shallowRef: UnwrapRef<typeof import('vue')['shallowRef']>
    readonly stringToColor: UnwrapRef<typeof import('./src/globals/helpers')['stringToColor']>
    readonly tagsCRUDService: UnwrapRef<typeof import('./src/globals/services')['tagsCRUDService']>
    readonly toRaw: UnwrapRef<typeof import('vue')['toRaw']>
    readonly toRef: UnwrapRef<typeof import('vue')['toRef']>
    readonly toRefs: UnwrapRef<typeof import('vue')['toRefs']>
    readonly toValue: UnwrapRef<typeof import('vue')['toValue']>
    readonly triggerRef: UnwrapRef<typeof import('vue')['triggerRef']>
    readonly unref: UnwrapRef<typeof import('vue')['unref']>
    readonly useAttrs: UnwrapRef<typeof import('vue')['useAttrs']>
    readonly useCssModule: UnwrapRef<typeof import('vue')['useCssModule']>
    readonly useCssVars: UnwrapRef<typeof import('vue')['useCssVars']>
    readonly useId: UnwrapRef<typeof import('vue')['useId']>
    readonly useLink: UnwrapRef<typeof import('vue-router')['useLink']>
    readonly useModel: UnwrapRef<typeof import('vue')['useModel']>
    readonly useRoute: UnwrapRef<typeof import('vue-router')['useRoute']>
    readonly useRouter: UnwrapRef<typeof import('vue-router')['useRouter']>
    readonly useSlots: UnwrapRef<typeof import('vue')['useSlots']>
    readonly useTemplateRef: UnwrapRef<typeof import('vue')['useTemplateRef']>
    readonly userCollectionCRUDService: UnwrapRef<typeof import('./src/globals/services')['userCollectionCRUDService']>
    readonly usersCRUDService: UnwrapRef<typeof import('./src/globals/services')['usersCRUDService']>
    readonly watch: UnwrapRef<typeof import('vue')['watch']>
    readonly watchEffect: UnwrapRef<typeof import('vue')['watchEffect']>
    readonly watchPostEffect: UnwrapRef<typeof import('vue')['watchPostEffect']>
    readonly watchSyncEffect: UnwrapRef<typeof import('vue')['watchSyncEffect']>
  }
}