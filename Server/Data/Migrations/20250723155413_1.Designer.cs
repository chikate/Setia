// <auto-generated />
using System;
using System.Collections.Generic;
using Main.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Main.Data.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20250723155413_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("base")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Main.Data.Models.MessageModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<Guid>>("Attachments")
                        .HasColumnType("uuid[]");

                    b.Property<Guid?>("AuthorDataId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("SentDate")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.Property<Guid?>("To")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorDataId");

                    b.ToTable("Posts", "base");
                });

            modelBuilder.Entity("Main.Modules.Adm.SettingsModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorDataId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorDataId");

                    b.ToTable("Settings", "base");
                });

            modelBuilder.Entity("Main.Modules.Audit.AuditModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<Guid?>("AuthorDataId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .HasColumnType("text");

                    b.Property<string>("EntityId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("AuthorDataId");

                    b.ToTable("Audit", "base");
                });

            modelBuilder.Entity("Main.Modules.Auth.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorDataId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("BirthDay")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EmailVerifiedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTimeOffset?>("ExecutionDate")
                        .HasColumnType("timestamptz");

                    b.PrimitiveCollection<List<Guid>>("Friends")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<Guid>>("Saves")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<string>("Signiture")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorDataId");

                    b.ToTable("Users", "base");
                });

            modelBuilder.Entity("Main.Data.Models.MessageModel", b =>
                {
                    b.HasOne("Main.Modules.Auth.UserModel", "AuthorData")
                        .WithMany()
                        .HasForeignKey("AuthorDataId");

                    b.Navigation("AuthorData");
                });

            modelBuilder.Entity("Main.Modules.Adm.SettingsModel", b =>
                {
                    b.HasOne("Main.Modules.Auth.UserModel", "AuthorData")
                        .WithMany()
                        .HasForeignKey("AuthorDataId");

                    b.Navigation("AuthorData");
                });

            modelBuilder.Entity("Main.Modules.Audit.AuditModel", b =>
                {
                    b.HasOne("Main.Modules.Auth.UserModel", "AuthorData")
                        .WithMany()
                        .HasForeignKey("AuthorDataId");

                    b.Navigation("AuthorData");
                });

            modelBuilder.Entity("Main.Modules.Auth.UserModel", b =>
                {
                    b.HasOne("Main.Modules.Auth.UserModel", "AuthorData")
                        .WithMany()
                        .HasForeignKey("AuthorDataId");

                    b.Navigation("AuthorData");
                });
#pragma warning restore 612, 618
        }
    }
}
